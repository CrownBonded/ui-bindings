apply from: 'constants.gradle'

buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath 'com.google.gms:google-services:3.1.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        mavenCentral()
    }
}

//Skip Javadoc generation for Java 1.8 as it breaks build
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

/**
 * Configure common tasks on all the submodules
 */
allprojects { project ->

    // Get constants, this is where we store things
    // like the list of submodules or the version
    project.apply from: "$rootDir/constants.gradle"

    def isLibrary = 'library'.equals(project.name)
    def isSubmodule = submodules.contains(project.name)

    if (isSubmodule || isLibrary) {

        // So that we can resolve 'android' variable
        project.apply plugin: 'com.android.library'
        android {
            compileSdkVersion compileSdk
            buildToolsVersion buildTools
        }

        // Task to generate sources JAR
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        // Task to generate javadoc
        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += configurations.compile
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        // Task to generate javadoc JAR
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        // Define base name for archives
        // Ex: firebase-ui-auth
        archivesBaseName = isSubmodule ? "firebase-ui-${project.name}" : "firebase-ui"

        // Use tasks above to define artifacts
        artifacts {
            archives javadocJar
            archives sourcesJar
        }

        // So that we can define publication
        project.apply plugin: 'maven-publish'

        publishing {
            // By passing -Pcustom_local=/some/path and running the
            // publishLibraryPublicationToCustomLocalRepository task you can publish this library to a
            // custom maven repository location on your machine.
            repositories {
                maven {
                    name 'CustomLocal'
                    url uri(project.hasProperty('custom_local') ? project.getProperty('custom_local') : '/tmp/')
                }
            }

            repositories {
                maven {
                    name 'BuildLocal'
                    url "$buildDir/repo"
                }
            }
        }
    }

    // POM to meet maven specs
    if (isLibrary || isSubmodule) {
        def targetName = isLibrary ? 'monolithLibrary' : "${project.name}Library"
